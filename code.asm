.MODEL tiny
.DATA

;TIMER-1 ADDRESS MAIN TIMER
CT0 EQU 30H
CT1 EQU 32H
CT2 EQU 34H
CRG EQU 36H

; 8255-1 ADDRESS
PA1 EQU 10H
PB1 EQU 12H
PC1 EQU 14H
CA1 EQU 16H

; 8255-2 ADDRESS
PA2 EQU 20H
PB2 EQU 22H
PC2 EQU 24H
CA2 EQU 26H


; USER DATA
UTMP DB 25
TVAL DB 15
OPV  DB 00 
 
.CODE
.STARTUP

	;INITIALISE 8255-1
	MOV AL, 10001001B
	OUT CA1, AL

	;INITIALISE 8255-2
	MOV AL, 90h
	OUT CA2, AL

	CALL LCD_INIT; INITIALIZES THE LCD

		; MAIN TIMER
	MOV AL, 00110110B
	OUT CRG, AL

	MOV AL, 01110110B
	OUT CRG, AL

	MOV AL, 88H
	OUT CT0,AL
	MOV AL, 13H
	OUT CT0,AL

	MOV AL, 60H
	OUT CT1, AL
	MOV AL, 0EAH
	OUT CT1, AL

	;PUT TIME IN MAIN TIMER
	MOV AL, 10010100B
	OUT CRG, AL
	MOV AL, 15
	OUT CT2, AL

RPT1:
	IN AL, PC1
	NOT AL
	AND AL, 03H
	ROR AL, 1
	JC TM1 ; JUMP TO TIMER MODE
	ROR AL, 1
	JNC X1                   ;******************************************
	MOV AL, UTMP
	INC AL
	CMP AL, 35
	JLE X2
	MOV AL, 16
X2:
	MOV UTMP, AL
X1:
	; SHOW TEMP OUTPUT IN LCD
	CALL TEMP_WRITE
	JMP E1

;TIMER MODE STARTS HERE
TM1:
	;ROR AL, 1                ;********************************************
	;JC X3
	MOV AL, TVAL
	MOV AH, 00
	MOV BL, 15
	DIV BL
	MOV AH, 00
	MUL BL
	ADD AL, 15
	CMP AL, 195
	JNZ X4
	MOV AL, 15
X4: 
	MOV TVAL, AL
	;PUT TIME IN MAIN TIMER
	MOV AL, 10010100B
	OUT CRG, AL
	MOV AL, TVAL  ;MOVE THE MINUTES
	OUT CT2, AL
X3:
	; SHOW TIMER VALUE IN LCD
	CALL TIME_WRITE

E1: ;AFTER TIMER MODE

	; CHECK FOR TEMPERATURES SENSORS
	;IN FROM ROOM TEMP TO AL
	MOV AL, 00
	CALL GET_TEMP

	CMP AL, UTMP
	JL TOK1
	MOV AL, OPV
	OR AL, 01
	MOV OPV, AL
	JMP TOK2
TOK1:
	MOV AL, OPV
	AND AL, 0FEH
	MOV OPV,AL
TOK2:

	; TEMP SENSOR 2
	MOV AL, 01
	CALL GET_TEMP
	CMP AL, UTMP
	JL TOK3
	MOV AL, OPV
	OR AL, 02
	MOV OPV, AL
	JMP TOK4
TOK3:
	MOV AL, OPV
	AND AL, 0FDH
	MOV OPV,AL
TOK4:
	; TEMP SENSOR 3
	MOV AL, 02
	CALL GET_TEMP
	CMP AL, UTMP
	JL TOK5
	MOV AL, OPV
	OR AL, 04
	MOV OPV, AL
	JMP TOK6
TOK5:
	MOV AL, OPV
	AND AL, 0FBH
	MOV OPV,AL
TOK6:
	; TEMP SENSOR 4
	MOV AL, 03
	CALL GET_TEMP
	CMP AL, UTMP
	JL TOK7
	MOV AL, OPV
	OR AL, 08
	MOV OPV, AL
	JMP TOK8
TOK7:
	MOV AL, OPV
	AND AL, 0F7H
	MOV OPV,AL;
TOK8:
	MOV AL, OPV
	OUT PB2, AL

    ;CALL DELAYX
	; GET TIMER VAL
	;IF ZERO REPEAT
					
	;MOV AL,80H
	;OUT CR2,AL
	;IN AL, CT2
	;CMP AL, 00
	;JNZ RPT1

	JMP RPT1

	INT 3H
.EXIT

DELAYX PROC
	; START DELAY
	MOV SI, 43690
	MOV BP, 43690
DELAY2:
	DEC BP
	NOP
	JNZ DELAY2
	DEC SI
	CMP SI,0    
	JNZ DELAY2
	; END DELAY
	RET
DELAYX ENDP

GET_TEMP PROC

		;ASSUMING AL HAS THE SENSOR TO BE SELECTED
		  out		PC2, al

;give ale  
          OR       al,00100000b
		  out       PC2,al 
		 
;give soc  
          OR		al,00110000b
		  out		PC2,al 
		  
		  nop
		  nop
		  nop
		  nop
;make ALE 0 
		  AND       al,11011111b
		  out       PC2,al  
;make SOC 0
		  
		  AND       al,11001111b
		  out       PC2,al

RE1:       
			IN AL, PC1
			AND AL, 04H
			JZ       RE1


		OR		al,00001000b
		out		PC2, al
		in        al, PA2
		
RET
GET_TEMP ENDP



LCD_INIT PROC NEAR
	MOV AL, 38H ;INITIALIZE LCD FOR 2 LINES & 5*7 MATRIX
	CALL COMNDWRT ;WRITE THE COMMAND TO LCD
	CALL DELAY ;WAIT BEFORE ISSUING THE NEXT COMMAND
	MOV AL, 0EH ;SEND COMMAND FOR LCD ON, CURSOR ON	
	CALL COMNDWRT
	CALL DELAY
	MOV AL, 01  ;CLEAR LCD
	CALL COMNDWRT	
	CALL DELAY
	MOV AL, 06  ;COMMAND FOR SHIFTING CURSOR RIGHT
	CALL COMNDWRT
	CALL DELAY
	RET
LCD_INIT ENDP   


DATWRIT PROC
	PUSH DX  ;save DX
	MOV DX,PA1  ;DX=port A address
	OUT DX, AL ;issue the char to LCD
	MOV AL, 00000101B ;RS=1, R/W=0, E=1 for H-to-L pulse
	MOV DX, PB1 ;port B address
	OUT DX, AL  ;make enable high
	MOV AL, 00000001B ;RS=1,R/W=0 and E=0 for H-to-L pulse
	OUT DX, AL
	POP DX
	RET
DATWRIT ENDP ;writing on the lcd ends

COMNDWRT PROC ;THIS PROCEDURE WRITES COMMANDS TO LCD
	MOV DX, PA1
	OUT DX, AL  ;SEND THE CODE TO PORT A
	MOV DX, PB1 	
	MOV AL, 00000100B ;RS=0,R/W=0,E=1 FOR H-TO-L PULSE
	OUT DX, AL
	NOP
	NOP
	MOV AL, 00000000B ;RS=0,R/W=0,E=0 FOR H-TO-L PULSE
	OUT DX, AL
	RET
COMNDWRT ENDP

;DELAY IN THE CIRCUIT HERE THE DELAY OF 20 MILLISECOND IS PRODUCED
DELAY PROC
	MOV CX, 1325 ;1325*15.085 USEC = 20 MSEC
	W1: 
		NOP
		NOP
		NOP
		NOP
		NOP
	LOOP W1
	RET
DELAY ENDP

TEMP_WRITE PROC NEAR
	PUSH AX
	PUSH BX
	CALL CLS
	CALL DELAY ;WAIT BEFORE ISSUING THE NEXT CHARACTER

	MOV BL, 10
	MOV AL, UTMP
	MOV AH,00
	DIV BL

	ADD AL, '0' ;DISPLAY TENS OF TEMP
	CALL DATWRIT ;ISSUE IT TO LCD
	CALL DELAY ;WAIT BEFORE ISSUING THE NEXT CHARACTER

	MOV AL, AH
	ADD AL, '0' ;DISPLAY ONES OF TEMP
	CALL DATWRIT ;ISSUE IT TO LCD
	CALL DELAY ;WAIT BEFORE ISSUING THE NEXT CHARACTER

	POP BX
	POP AX
	RET
TEMP_WRITE ENDP

TIME_WRITE PROC NEAR
	PUSH AX
	PUSH BX
	CALL CLS
	CALL DELAY ;WAIT BEFORE ISSUING THE NEXT CHARACTER
	
	MOV BL, 10
	MOV AL, TVAL

	MOV AH,00
	ADD AX, AX
	DIV BL

	MOV BH, AH
	MOV AH,00
	DIV BL

	ADD AL, '0' ;DISPLAY HUNDREDS OF TEMP
	CALL DATWRIT ;ISSUE IT TO LCD
	CALL DELAY ;WAIT BEFORE ISSUING THE NEXT CHARACTER

	MOV AL, AH
	ADD AL, '0' ;DISPLAY TENS OF TEMP
	CALL DATWRIT ;ISSUE IT TO LCD
	CALL DELAY ;WAIT BEFORE ISSUING THE NEXT CHARACTER

	MOV AL, BH
	ADD AL, '0' ;DISPLAY ONES OF TEMP
	CALL DATWRIT ;ISSUE IT TO LCD                                                      
	CALL DELAY ;WAIT BEFORE ISSUING THE NEXT CHARACTER

	POP BX
	POP AX
	RET
TIME_WRITE ENDP

CLS PROC 
	MOV AL, 01  ;CLEAR LCD
	CALL COMNDWRT
	CALL DELAY
	RET
CLS ENDP

END
